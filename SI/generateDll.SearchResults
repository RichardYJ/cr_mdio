---- cr_mdio_write Matches (3 in 3 files) ----
Cr_mdio.c (d:\workspace\mycode\generatedll):void cr_mdio_write(CR_U16 RegAddr, CR_U16 RegVal) 
Cr_mdio.def (d:\workspace\mycode\generatedll):cr_mdio_write @3
Cr_mdio_api.h (d:\workspace\mycode\generatedll)://    DLL_PUBLIC extern CR_STATUS cr_mdio_write(CR_U16 reg_addr, CR_U16 reg_val);
---- LOG_ERROR Matches (16 in 1 files) ----
Cr_mdio.c (d:\workspace\mycode\generatedll):#define LOG_ERROR(a) ;
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("unable to open ftdi device0");
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("failed to reset ftdi device");
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("failed to FT_GetQueueStatus");
Cr_mdio.c (d:\workspace\mycode\generatedll):            LOG_ERROR("unable to set timeouts: %s",
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("unable to set timeouts: %s",
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("unable to enable bit i/o mode: %s",
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("failed to FT_Write: %s",
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("failed to FT_Write: %s",
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("failed to FT_Write: %s",
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("unable to FT_Write: %s",
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("unable to FT_Write: %s",
Cr_mdio.c (d:\workspace\mycode\generatedll):            LOG_ERROR("FT_Read returned: %s", ftd2xx_status_string(status));
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("couldn't read enough bytes from "
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("error purging ftd2xx device: %s",
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("Failed to close ftd2xx device!");
---- LOG_DEBUG Matches (5 in 0 files) ----
Cr_mdio.c (d:\workspace\mycode\generatedll):#define LOG_DEBUG(a) ;
Cr_mdio.c (d:\workspace\mycode\generatedll):    LOG_DEBUG("cr_mdio write[%04x]%04x", reg_addr, reg_val);
Cr_mdio.c (d:\workspace\mycode\generatedll):    LOG_DEBUG("cr_mdio read [%04x]=%04x", reg_addr, (buf[14] << 8) | buf[15]);
Cr_mdio.c (d:\workspace\mycode\generatedll):    LOG_DEBUG("cr_mdio init.");
Cr_mdio.c (d:\workspace\mycode\generatedll):    LOG_DEBUG("cr_mdio close.");
---- port Matches (4 in 1 files) ----
Cr_mdio.c (d:\workspace\mycode\generatedll):static int port;
Cr_mdio.c (d:\workspace\mycode\generatedll):	port = mdio;
Cr_mdio.c (d:\workspace\mycode\generatedll):    if (port == 0)
Cr_mdio.c (d:\workspace\mycode\generatedll):    if (port == 0)
---- OutputBuffer Matches (63 in 1 files) ----
Cr_mdio.c (d:\workspace\mycode\generatedll):unsigned char OutputBuffer[1024];
Cr_mdio.c (d:\workspace\mycode\generatedll)://	unsigned char OutputBuffer[64];
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] =(unsigned char) 0x80; //Command to set directions of lower 8 pins and force value on bits set as output
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] =(unsigned char) 0xF3; //Set SDA, SCL high, WP disabled by SK, DO at bit 1, GPIOL0 at bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] =(unsigned char) 0xF3; //Set SK,DO,GPIOL0 pins as output with bit 1, other pins as input with bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] =(unsigned char) 0x80; //Command to set directions of lower 8 pins and force value on bits set as output
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] =(unsigned char) 0xF1; //Set SDA low, SCL high, WP disabled by SK at bit 1, DO, GPIOL0 at bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] =(unsigned char) 0xFB; //Set SK,DO,GPIOL0 pins as output with bit 1, other pins as input with bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] =(unsigned char) 0x80; //Command to set directions of lower 8 pins and force value on bits set as output
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] =(unsigned char) 0xF1; //Set SDA low, SCL high, WP disabled by SK at bit 1, DO, GPIOL0 at bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] =(unsigned char) 0xFB; //Set SK,DO,GPIOL0 pins as output with bit 1, other pins as input with bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] =(unsigned char) 0x80; //Command to set directions of lower 8 pins and force value on bits set as output
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] =(unsigned char) 0xF1; //Set SDA low, SCL high, WP disabled by SK at bit 1, DO, GPIOL0 at bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] =(unsigned char) 0xFB; //Set SK,DO,GPIOL0 pins as output with bit 1, other pins as input with bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] =(unsigned char) 0x80; //Command to set directions of lower 8 pins and force value on bits set as output
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] =(unsigned char) 0x00; //Set SDA, SCL low, WP disabled by SK, DO, GPIOL0 at bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] =(unsigned char) 0xFB; //Set SK,DO,GPIOL0 pins as output with bit 1, other pins as input with bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):	//unsigned char OutputBuffer[64];
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] = 0x80; //Command to set directions of lower 8 pins and force value on bits set as output
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] = 0xF0; //Set SDA low, SCL low, WP disabled by SK at bit 1, DO, GPIOL0 at bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] = 0xFB; //Set SK,DO,GPIOL0 pins as output with bit 1, other pins as input with bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] = 0x80; //Command to set directions of lower 8 pins and force value on bits set as output
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] = 0xF1; //Set SDA low, SCL high, WP disabled by SK at bit 1, DO, GPIOL0 at bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] = 0xFB; //Set SK,DO,GPIOL0 pins as output with bit 1, other pins as input with bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] = 0x80; //Command to set directions of lower 8 pins and force value on bits set as output
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] = 0xF1; //Set SDA low, SCL high, WP disabled by SK at bit 1, DO, GPIOL0 at bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] = 0xFB; //Set SK,DO,GPIOL0 pins as output with bit 1, other pins as input with bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] = 0x80; //Command to set directions of lower 8 pins and force value on bits set as output
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] = 0xF3; //Set SDA, SCL high, WP disabled by SK, DO at bit 1, GPIOL0 at bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] = 0xFB; //Set SK,DO,GPIOL0 pins as output with bit 1, other pins as input with bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] = 0x80; //Command to set directions of lower 8 pins and force value on bits set as output
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] = 0xF3; //Set SDA, SCL high, WP disabled by SK, DO at bit 1, GPIOL0 at bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] = 0xFB; //Set SK,DO,GPIOL0 pins as output with bit 1, other pins as input with bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):	//unsigned char OutputBuffer[32];
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] = '\x11'; //MSB_FALLING_EDGE_CLOCK_BYTE_OUT; //Clock data byte out on â€“ve Clock Edge MSB first
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] = '\x00';
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] = '\x00'; //Data length of 0x0000 means 1 byte data to clock out(8 bit)
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] = dwDataSend; //Add data to be send
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] = '\x80'; //Command to set directions of lower 8 pins and force value on bits set as output
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] = '\x00'; //Set SCL low, WP disabled by SK, GPIOL0 at bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] = '\x11'; //Set SK, GPIOL0 pins as output with bit 1, DO and other pins as input with bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] = '\x22'; //MSB_RISING_EDGE_CLOCK_BIT_IN; //Command to scan in ACK bit , -ve clock Edge MSB first
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] = '\x0'; //Length of 0x0 means to scan in 1 bit
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] = '\x87'; //Send answer back immediate command
Cr_mdio.c (d:\workspace\mycode\generatedll):	ftStatus = FT_Write(ftdih, OutputBuffer, dwNumBytesToSend, &dwNumBytesSent); //Send off the commands
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] = '\x80'; //Command to set directions of lower 8 pins and force value on bits set as output
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] = '\x02'; //Set SDA high, SCL low, WP disabled by SK at bit 0, DO, GPIOL0 at bit 1
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] = '\x13'; //Set SK,DO,GPIOL0 pins as output with bit 1, other pins as input with bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):	//unsigned char OutputBuffer[128];
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] = '\x80'; //Command to set directions of lower 8 pins and force value on bits set as output
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] = '\x00';
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] = '\x11';
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] = '\x20';  //MSB_UP_EDGE_CLOCK_BYTE_IN; //Command to clock data byte in on â€“ve Clock Edge MSB first
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] = '\x00';
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] = '\x00'; //Data length of 0x0000 means 1 byte data to clock in
Cr_mdio.c (d:\workspace\mycode\generatedll):	OutputBuffer[dwNumBytesToSend++] = '\x87'; //Send answer back immediate command
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] = 0x80; //Command to set directions of lower 8 pins and force value on bits set as output
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] = 0x00; //Set SDA low, SCL low, WP disabled by SK at bit 0, DO, GPIOL0 at bit 1
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] = 0x13; //Set SK,DO,GPIOL0 pins as output with bit 1, other pins as input with bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] = 0x80; //Command to set directions of lower 8 pins and force value on bits set as output
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] = 0x01; //Set SDA low, SCL high, WP disabled by SK at bit 1, DO, GPIOL0 at bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):		OutputBuffer[dwNumBytesToSend++] = 0x13; //Set SK,DO,GPIOL0 pins as output with bit 1, other pins as input with bit 0
Cr_mdio.c (d:\workspace\mycode\generatedll):	ftStatus = FT_Write(ftdih, OutputBuffer, dwNumBytesToSend, &dwNumBytesSent); //Send off the commands
---- cr_mdio init Matches (1 in 1 files) ----
Cr_mdio.c (d:\workspace\mycode\generatedll):    LOG_DEBUG("cr_mdio init.");
---- 34 Matches (1 in 1 files) ----
Cr_mdio.c (d:\workspace\mycode\generatedll):    buf[0] = (unsigned char)0x34; //clock data byte in, MSB first
---- 84 Matches (0 in 0 files) ----
---- 85 Matches (0 in 0 files) ----
---- LOG_ERROR Matches (16 in 1 files) ----
Cr_mdio.c (d:\workspace\mycode\generatedll):#define LOG_ERROR printf //;
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("unable to open ftdi device0\n");
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("failed to reset ftdi device\n");
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("failed to FT_GetQueueStatus\n");
Cr_mdio.c (d:\workspace\mycode\generatedll):            LOG_ERROR("unable to set timeouts: %s\n",
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("unable to set timeouts: %s\n",
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("unable to enable bit i/o mode: %s\n",
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("failed to FT_Write: %s\n",
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("failed to FT_Write: %s\n",
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("failed to FT_Write: %s\n",
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("unable to FT_Write: %s\n",
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("unable to FT_Write: %s\n",
Cr_mdio.c (d:\workspace\mycode\generatedll):            LOG_ERROR("FT_Read returned: %s\n", ftd2xx_status_string(status));
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("couldn't read enough bytes from "
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("error purging ftd2xx device: %s\n",
Cr_mdio.c (d:\workspace\mycode\generatedll):        LOG_ERROR("Failed to close ftd2xx device!\n");
